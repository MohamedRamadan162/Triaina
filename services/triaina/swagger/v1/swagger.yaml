---
openapi: 3.0.1
info:
  title: Triaina API
  version: v1
components:
  securitySchemes:
    jwtCookie:
      type: apiKey
      in: cookie
      name: jwt
    refreshCookie:
      type: apiKey
      in: cookie
      name: refresh_token
paths:
  "/api/v1/auth/signup":
    post:
      summary: User Signup
      tags:
      - Authentication
      parameters: []
      responses:
        '201':
          description: user created
        '422':
          description: validation failed
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                username:
                  type: string
                  example: johndoe
                  minLength: 4
                email:
                  type: string
                  format: email
                  example: johndoe@email.com
                password:
                  type: string
                  example: SecurePass123!
                password_confirmation:
                  type: string
                  example: SecurePass123!
              required:
              - name
              - username
              - email
              - password
              - password_confirmation
  "/api/v1/auth/login":
    post:
      summary: User Login
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: user logged in
        '401':
          description: invalid credentials
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: johndoe@email.com
                password:
                  type: string
                  example: SecurePass123!
              required:
              - email
              - password
  "/api/v1/course_sections":
    post:
      summary: Create a new course section
      tags:
      - Course Sections
      security:
      - cookie_auth: []
      parameters: []
      responses:
        '201':
          description: section created
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: New Section
                description:
                  type: string
                  example: New section description
                course_id:
                  type: integer
                  example: 1
              required:
              - title
              - course_id
  "/api/v1/course_sections/{id}":
    parameters:
    - name: id
      in: path
      description: Course Section ID
      required: true
      schema:
        type: string
    get:
      summary: Get a specific course section
      tags:
      - Course Sections
      security:
      - cookie_auth: []
      responses:
        '200':
          description: section found
        '401':
          description: unauthorized
    put:
      summary: Update a course section
      tags:
      - Course Sections
      security:
      - cookie_auth: []
      parameters: []
      responses:
        '200':
          description: section updated
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Updated Section Title
                description:
                  type: string
                  example: Updated section description
              required: []
    delete:
      summary: Delete a course section
      tags:
      - Course Sections
      security:
      - cookie_auth: []
      responses:
        '204':
          description: section deleted
        '401':
          description: unauthorized
  "/api/v1/courses":
    get:
      summary: List all courses
      tags:
      - Courses
      security:
      - cookie_auth: []
      responses:
        '200':
          description: courses found
        '401':
          description: unauthorized
    post:
      summary: Create a new course
      tags:
      - Courses
      security:
      - cookie_auth: []
      parameters: []
      responses:
        '201':
          description: course created
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: New Course
                description:
                  type: string
                  example: New course description
                start_date:
                  type: string
                  format: date_time
                  example: '2025-05-04T00:00:00.000Z'
                end_date:
                  type: string
                  format: date_time
                  nullable: true
              required:
              - name
              - description
              - start_date
  "/api/v1/courses/{id}":
    parameters:
    - name: id
      in: path
      description: Course ID
      required: true
      schema:
        type: string
    get:
      summary: Get a specific course
      tags:
      - Courses
      security:
      - cookie_auth: []
      responses:
        '200':
          description: course found
        '401':
          description: unauthorized
    put:
      summary: Update a course
      tags:
      - Courses
      security:
      - cookie_auth: []
      parameters: []
      responses:
        '200':
          description: course updated
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Updated Course Name
                description:
                  type: string
                  example: Updated course description
                start_date:
                  type: string
                  format: date_time
                  example: '2025-05-04T00:00:00.000Z'
                end_date:
                  type: string
                  format: date_time
                  nullable: true
              required: []
    delete:
      summary: Delete a course
      tags:
      - Courses
      security:
      - cookie_auth: []
      responses:
        '204':
          description: course deleted
        '401':
          description: unauthorized
  "/api/v1/section_units":
    post:
      summary: Create a new section unit
      tags:
      - Section Units
      security:
      - cookie_auth: []
      parameters: []
      responses:
        '201':
          description: unit created
        '401':
          description: unauthorized
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                section_id:
                  type: integer
                content:
                  type: file
                  format: binary
              required:
              - title
              - section_id
              - content
  "/api/v1/section_units/{id}":
    parameters:
    - name: id
      in: path
      description: Section Unit ID
      required: true
      schema:
        type: string
    get:
      summary: Get a specific section unit
      tags:
      - Section Units
      security:
      - cookie_auth: []
      responses:
        '200':
          description: unit found
        '401':
          description: unauthorized
    put:
      summary: Update a section unit
      tags:
      - Section Units
      security:
      - cookie_auth: []
      parameters: []
      responses:
        '200':
          description: unit updated
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Updated Unit Title
                description:
                  type: string
                  example: Updated unit description
              required: []
    delete:
      summary: Delete a section unit
      tags:
      - Section Units
      security:
      - cookie_auth: []
      responses:
        '204':
          description: unit deleted
        '401':
          description: unauthorized
  "/api/v1/users/me":
    get:
      summary: Fetch the current user
      tags:
      - Users
      security:
      - cookie_auth: []
      responses:
        '200':
          description: user found
        '401':
          description: unauthorized
    patch:
      summary: Update the current user
      tags:
      - Users
      security:
      - cookie_auth: []
      parameters: []
      responses:
        '200':
          description: user updated
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: johndoe@email.com
                username:
                  type: string
                  minLength: 4
                  example: johndoe
              required: []
    delete:
      summary: Delete the current user
      tags:
      - Users
      security:
      - cookie_auth: []
      responses:
        '204':
          description: user deleted
        '401':
          description: unauthorized
servers:
- url: http://localhost:3000
  description: Local dev server (HTTP)
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: triaina.com
