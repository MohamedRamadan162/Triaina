---
openapi: 3.0.1
info:
  title: Triaina API
  version: v1
paths:
  "/api/v1/auth/signup":
    post:
      summary: User Signup
      tags:
      - Authentication
      parameters: []
      description: User creation failed due to validation errors
      responses:
        '201':
          description: user created
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Auth/Signup"
        '422':
          description: validation failed
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Error/ValidationError"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                username:
                  type: string
                  example: johndoe
                  minLength: 4
                email:
                  type: string
                  format: email
                  example: johndoe@email.com
                password:
                  type: string
                  example: SecurePass123!
                password_confirmation:
                  type: string
                  example: SecurePass123!
              required:
              - name
              - username
              - email
              - password
              - password_confirmation
  "/api/v1/auth/login":
    post:
      summary: User Login
      tags:
      - Authentication
      parameters: []
      description: User login failed due to invalid email or password
      responses:
        '200':
          description: user logged in
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Auth/Login"
        '401':
          description: invalid credentials
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Error/WrongCredentials"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: johndoe@email.com
                password:
                  type: string
                  example: SecurePass123!
              required:
              - email
              - password
  "/api/v1/courses/{course_id}/sections":
    parameters:
    - name: course_id
      in: path
      description: Course ID
      required: true
      schema:
        type: integer
    get:
      summary: List all course sections
      tags:
      - Course Sections
      security:
      - cookie_auth: []
      description: Unauthorized access to sections
      responses:
        '200':
          description: sections found
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Course/Section/List"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Error/Unauthorized"
    post:
      summary: Create a new course section
      tags:
      - Course Sections
      security:
      - cookie_auth: []
      parameters: []
      description: Unauthorized access to create section
      responses:
        '201':
          description: section created
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Course/Section/Create"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Error/Unauthorized"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: New Section
                description:
                  type: string
                  example: New section description
              required:
              - title
  "/api/v1/courses/{course_id}/sections/{section_id}":
    parameters:
    - name: course_id
      in: path
      description: Course ID
      required: true
      schema:
        type: integer
    - name: section_id
      in: path
      description: Course Section ID
      required: true
      schema:
        type: integer
    get:
      summary: Get a specific course section
      tags:
      - Course Sections
      security:
      - cookie_auth: []
      description: Unauthorized access to section
      responses:
        '200':
          description: section found
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Course/Section/Show"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Error/Unauthorized"
    put:
      summary: Update a course section
      tags:
      - Course Sections
      security:
      - cookie_auth: []
      parameters: []
      description: Unauthorized access to update section
      responses:
        '200':
          description: section updated
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Course/Section/Update"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Error/Unauthorized"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Updated Section Title
                description:
                  type: string
                  example: Updated section description
              required: []
    delete:
      summary: Delete a course section
      tags:
      - Course Sections
      security:
      - cookie_auth: []
      description: Unauthorized access to delete section
      responses:
        '204':
          description: section deleted
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Error/Unauthorized"
  "/api/v1/courses":
    get:
      summary: List all courses
      tags:
      - Courses
      security:
      - cookie_auth: []
      description: Unauthorized access to courses
      responses:
        '200':
          description: courses found
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Course/List"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Error/Unauthorized"
    post:
      summary: Create a new course
      tags:
      - Courses
      security:
      - cookie_auth: []
      parameters: []
      description: Unauthorized access to courses
      responses:
        '201':
          description: course created
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Course/Create"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Error/Unauthorized"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: New Course
                description:
                  type: string
                  example: New course description
                start_date:
                  type: string
                  format: date_time
                  example: '2025-05-04T00:00:00.000Z'
                end_date:
                  type: string
                  format: date_time
                  nullable: true
              required:
              - name
              - start_date
  "/api/v1/courses/{id}":
    parameters:
    - name: id
      in: path
      description: Course ID
      required: true
      schema:
        type: string
    get:
      summary: Get a specific course
      tags:
      - Courses
      security:
      - cookie_auth: []
      description: Unauthorized access to courses
      responses:
        '200':
          description: course found
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Course/Show"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Error/Unauthorized"
    put:
      summary: Update a course
      tags:
      - Courses
      security:
      - cookie_auth: []
      parameters: []
      description: Unauthorized access to courses
      responses:
        '200':
          description: course updated
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Course/Update"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Error/Unauthorized"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Updated Course Name
                description:
                  type: string
                  example: Updated course description
                start_date:
                  type: string
                  format: date_time
                  example: '2025-05-04T00:00:00.000Z'
                end_date:
                  type: string
                  format: date_time
                  nullable: true
              required: []
    delete:
      summary: Delete a course
      tags:
      - Courses
      security:
      - cookie_auth: []
      description: Unauthorized access to courses
      responses:
        '204':
          description: course deleted
        '401':
          description: unauthorized
  "/api/v1/courses/{course_id}/sections/{section_id}/units":
    get:
      summary: List all section units for a course section
      tags:
      - Section Units
      security:
      - cookie_auth: []
      description: Unauthorized access to list section units
      responses:
        '200':
          description: list of section units
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Course/Section/Unit/List"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Error/Unauthorized"
    post:
      summary: Create a new section unit
      tags:
      - Section Units
      security:
      - cookie_auth: []
      parameters: []
      description: Unauthorized access to create section unit
      responses:
        '201':
          description: unit created
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Course/Section/Unit/Create"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Error/Unauthorized"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Updated Unit Title
                  description: Title of the section unit
                description:
                  type: string
                  example: Updated unit description
                  description: Description of the section unit
                section_id:
                  type: integer
                  example: 123
                  description: ID of the parent course section
                content:
                  type: string
                  format: binary
                  description: File content of the section unit
              required:
              - title
              - content
  "/api/v1/courses/{course_id}/sections/{section_id}/units/{unit_id}":
    parameters:
    - name: unit_id
      in: path
      description: Section Unit ID
      required: true
      schema:
        type: string
    get:
      summary: Get a specific section unit
      tags:
      - Section Units
      security:
      - cookie_auth: []
      description: Unauthorized access to section unit
      responses:
        '200':
          description: unit found
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Course/Section/Unit/Show"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Error/Unauthorized"
    put:
      summary: Update a section unit
      tags:
      - Section Units
      security:
      - cookie_auth: []
      parameters: []
      description: Unauthorized access to update section unit
      responses:
        '200':
          description: unit updated
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Course/Section/Unit/Update"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Error/Unauthorized"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Updated Unit Title
                description:
                  type: string
                  example: Updated unit description
              required: []
    delete:
      summary: Delete a section unit
      tags:
      - Section Units
      security:
      - cookie_auth: []
      description: Unauthorized access to delete section unit
      responses:
        '204':
          description: unit deleted
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Error/Unauthorized"
  "/api/v1/users/{id}/courses":
    get:
      summary: List all courses for a user
      tags:
      - User Courses
      description: List of courses for a user
      security:
      - cookie_auth: []
      parameters:
      - name: id
        in: path
        required: true
        description: User ID
        schema:
          type: integer
      responses:
        '200':
          description: List of courses
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/User/Course/List"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                example_0:
                  value:
                  - success: 'false'
                    message: Unauthorized Action!
                  - success: 'false'
                    message: Missing token in the sent header!
                  - success: 'false'
                    message: Invalid token, Authorization failed!
                  - success: 'false'
                    message: Token expired, Authorization failed!
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: User not found
          content:
            application/json:
              examples:
                example_0:
                  value:
                    success: 'false'
                    message: Can not find record with id 1
              schema:
                "$ref": "#/components/schemas/error"
  "/api/v1/users/me":
    get:
      summary: Fetch the current user
      tags:
      - Users
      security:
      - cookie_auth: []
      description: Unauthorized access to courses
      responses:
        '200':
          description: user found
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/User/Show"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Error/Unauthorized"
    patch:
      summary: Update the current user
      tags:
      - Users
      security:
      - cookie_auth: []
      parameters: []
      description: Unauthorized access to courses
      responses:
        '200':
          description: user updated
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/User/Update"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/x-responses/Error/Unauthorized"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: johndoe@email.com
                username:
                  type: string
                  minLength: 4
                  example: johndoe
              required: []
    delete:
      summary: Delete the current user
      tags:
      - Users
      security:
      - cookie_auth: []
      description: Unauthorized access to courses
      responses:
        '204':
          description: user deleted
        '401':
          description: unauthorized
servers:
- url: http://localhost:3000
  description: Local dev server (HTTP)
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: triaina.com
components:
  securitySchemes:
    jwtCookie:
      type: apiKey
      in: cookie
      name: jwt
    refreshCookie:
      type: apiKey
      in: cookie
      name: refresh_token
  parameters:
    id_param:
      name: id
      in: path
      description: The id to fetch with
      required: true
      schema:
        type: number
        example: 1
    locale_param:
      name: Accept-Language
      in: header
      type: string
      description: "A localiztion param and it only accepts **ar** or **en**. \n\n
        \            > Please note: in case of passing this param in any protected
        endpoint\n             it automatically overrides the locale of the current
        user"
      required: false
      schema:
        type: string
        example: ar
        default: en
    page_param:
      name: page
      in: query
      description: The current page for paginated items, send it with value = -1 if
        no pagination needed
      schema:
        type: number
        example: 3
    items_param:
      name: items
      in: query
      description: The number of items per page
      schema:
        type: number
        example: 10
  schemas:
    Error:
      type: string
      example: An error occurred
    Unit:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Unit 1
        description:
          type: string
          example: Unit 1 description
        order_index:
          type: integer
          example: 1
        section_id:
          type: integer
          example: 1
        content_url:
          type: string
          example: https://example.com/unit1.mp4
      required:
      - id
      - title
      - description
      - order_index
      - section_id
      - content_url
    Section:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Section 1
        description:
          type: string
          example: Section 1 description
        order_index:
          type: integer
          example: 1
        course_id:
          type: integer
          example: 1
        units:
          type: array
          items:
            "$ref": "#/components/schemas/Unit"
      required:
      - id
      - title
      - description
      - order_index
      - course_id
      - units
    Course:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Course 1
        description:
          type: string
          example: Course 1 description
        join_code:
          type: string
          example: '123456'
        start_date:
          type: string
          example: '2025-01-01'
        end_date:
          type: string
          example: '2025-01-01'
        sections:
          type: array
          items:
            "$ref": "#/components/schemas/Section"
      required:
      - id
      - name
      - description
      - join_code
      - start_date
      - end_date
      - sections
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: johndoe@email.com
        verified:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
  x-responses:
    Auth:
      Signup:
        type: object
        required:
        - success
        - data
        properties:
          success:
            type: boolean
            example: true
          user:
            "$ref": "#/components/schemas/User"
      Login:
        type: object
        required:
        - success
        - data
        properties:
          success:
            type: boolean
            example: true
          user:
            "$ref": "#/components/schemas/User"
    User:
      List:
        type: object
        required:
        - success
        - data
        properties:
          success:
            type: boolean
            example: true
          users:
            type: array
            items:
              "$ref": "#/components/schemas/User"
      Show:
        type: object
        required:
        - success
        - data
        properties:
          success:
            type: boolean
            example: true
          user:
            "$ref": "#/components/schemas/User"
      Update:
        type: object
        required:
        - success
        - data
        properties:
          success:
            type: boolean
            example: true
          user:
            "$ref": "#/components/schemas/User"
      Course:
        List:
          type: object
          required:
          - success
          - data
          properties:
            success:
              type: boolean
              example: true
            courses:
              type: array
              items:
                "$ref": "#/components/schemas/Course"
    Course:
      List:
        type: object
        required:
        - success
        - data
        properties:
          success:
            type: boolean
            example: true
          courses:
            type: array
            items:
              "$ref": "#/components/schemas/Course"
      Show:
        type: object
        required:
        - success
        - data
        properties:
          success:
            type: boolean
            example: true
          course:
            "$ref": "#/components/schemas/Course"
      Create:
        type: object
        required:
        - success
        - data
        properties:
          success:
            type: boolean
            example: true
          course:
            "$ref": "#/components/schemas/Course"
      Update:
        type: object
        required:
        - success
        - data
        properties:
          success:
            type: boolean
            example: true
          course:
            "$ref": "#/components/schemas/Course"
      Section:
        List:
          type: object
          required:
          - success
          - data
          properties:
            success:
              type: boolean
              example: true
            sections:
              type: array
              items:
                "$ref": "#/components/schemas/Section"
        Show:
          type: object
          required:
          - success
          - data
          properties:
            success:
              type: boolean
              example: true
            section:
              "$ref": "#/components/schemas/Section"
        Create:
          type: object
          required:
          - success
          - data
          properties:
            success:
              type: boolean
              example: true
            section:
              "$ref": "#/components/schemas/Section"
        Update:
          type: object
          required:
          - success
          - data
          properties:
            success:
              type: boolean
              example: true
            section:
              "$ref": "#/components/schemas/Section"
        Unit:
          List:
            type: object
            required:
            - success
            - data
            properties:
              success:
                type: boolean
                example: true
              units:
                type: array
                items:
                  "$ref": "#/components/schemas/Unit"
          Show:
            type: object
            required:
            - success
            - data
            properties:
              success:
                type: boolean
                example: true
              unit:
                "$ref": "#/components/schemas/Unit"
          Create:
            type: object
            required:
            - success
            - data
            properties:
              success:
                type: boolean
                example: true
              unit:
                "$ref": "#/components/schemas/Unit"
          Update:
            type: object
            required:
            - success
            - data
            properties:
              success:
                type: boolean
                example: true
              unit:
                "$ref": "#/components/schemas/Unit"
    Error:
      Unauthorized:
        type: object
        required:
        - success
        - data
        properties:
          success:
            type: boolean
            example: false
          message:
            "$ref": "#/components/schemas/Error"
      WrongCredentials:
        type: object
        required:
        - success
        - data
        properties:
          success:
            type: boolean
            example: false
          message:
            "$ref": "#/components/schemas/Error"
      ValidationError:
        type: object
        required:
        - success
        - data
        properties:
          success:
            type: boolean
            example: false
          message:
            "$ref": "#/components/schemas/Error"
