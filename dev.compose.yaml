services:
  triaina-backend:
    build:
      context: ./services/triaina-backend
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 3000:3000
    env_file:
      - ./env/aws.env
    volumes:
      - ./services/triaina-backend:/rails
    networks:
      - triaina-network
    develop:
      watch:
        - action: rebuild
          path: ./services/triaina/Gemfile
        - action: rebuild
          path: ./services/user-triaina/config

  triaina-frontend:
    build:
      context: ./services/triaina-frontend
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 3001:3000
    volumes:
      - ./services/triaina-frontend:/app
      - /app/node_modules
    networks:
      - triaina-network
    develop:
      watch:
        - action: rebuild
          path: ./services/triaina-frontend/package.json

  redis-cache:
    image: redis:7.2-alpine
    restart: always
    ports:
      - 6379:6379
    volumes:
      - ./dev-data/redis:/data
    command: redis-server --save 60 1 --loglevel warning
    networks:
      - triaina-network

  postgres-db:
    image: postgres:17.3-alpine3.20
    restart: always
    ports:
      - 5432:5432
    env_file:
      - ./env/postgres.env
    volumes:
      - ./dev-data/postgres:/var/lib/postgresql/data
    networks:
      - triaina-network

  zookeeper:
    image: bitnami/zookeeper
    restart: always
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"
    volumes:
      - ./dev-data/zookeeper:/bitnami/zookeeper
    networks:
      - triaina-network

  kafka-broker:
    image: bitnami/kafka:3.6.0
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-broker:9092"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - ./dev-data/kafka:/bitnami/kafka
    networks:
      - triaina-network

  api-gateway:
    image: kong/kong-gateway:latest
    restart: always
    networks:
      - triaina-network
    ports:
      - "8000:8000" # Public API Gateway Port
      - "8001:8001" # Admin API
    volumes:
      - ./api-gateway.yml:/kong/kong.yml
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: "/kong/kong.yml"
      KONG_PROXY_ACCESS_LOG: "/dev/stdout"
      KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
      KONG_PROXY_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_ERROR_LOG: "/dev/stderr"

networks:
  triaina-network:
    driver: bridge
